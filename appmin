// 공통 함수: Calculation 동작 처리 hydro_yangs
async function showCalculationWindow() {
    dataWindow.setVisible(true);
    const file = ui.getCurrentFile();
    const filePath = file?.fileObject?.path;
    const currentPageName = ui.currentPage.getName()
    const userOption = "IP"
    // 1. 저장 먼저 실행
    ui.actions.get('save').funct();

    // 2. 저장 완료 후 실행되도록 딜레이
    setTimeout(async () => {
        try {
            const result = await window.electronAPI.runHydro(filePath, currentPageName, userOption);
            console.log("Hydro result:", result);
            showStickyMessage(result);

            // ✅ 계산 후 동기화
            ui.actions.get('synchronize').funct();

        } catch (err) {
            console.error("Hydro error:", err);
            showStickyMessage("⚠️ hydro calculation error : " + err);

            // ⚠️ 에러가 있어도 동기화 시도
            ui.actions.get('synchronize').funct();
        }
    }, 1); // 저장이 끝날 때까지 대기
}

// 공통 함수: Stream Data 편집기 실행
async function showEditStreamWindow() {
    const file = ui.getCurrentFile();
    const filePath = file?.fileObject?.path;
    const currentPageName = ui.currentPage.getName();

    // 1. 저장 먼저 실행
    ui.actions.get('save').funct();

    // 2. 저장 완료 후 실행되도록 딜레이
    setTimeout(() => {
        try {
            // ✅ 파이썬 GUI 실행 (결과 반환 없음)
            window.electronAPI.editStreamData(filePath, currentPageName);
            showStickyMessage("✅ Stream data editor launched");
        } catch (err) {
            console.error("Edit Stream error:", err);
            showStickyMessage("⚠️ Failed to launch stream data editor : " + err);
        }
    }, 500); // 저장이 끝날 때까지 대기
}


// Adds action 여기가 메뉴실행지역
ui.actions.addAction('Edit_HYDRO_Data', function() {
    var k = ui.editor.graph.getSelectionCell() || ui.editor.graph.getModel().getRoot();
    ui.showDataDialog(k);
}, null, null, 'F6').label = 'Edit Hydro Data';
 
